/*
 * This file is generated by jOOQ.
 */
package inventory.generated.jooq.tables;


import inventory.generated.jooq.DefaultSchema;
import inventory.generated.jooq.Keys;
import inventory.generated.jooq.tables.records.ItemInventoryRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ItemInventory extends TableImpl<ItemInventoryRecord> {

    private static final long serialVersionUID = 905446141;

    /**
     * The reference instance of <code>item_inventory</code>
     */
    public static final ItemInventory ITEM_INVENTORY = new ItemInventory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemInventoryRecord> getRecordType() {
        return ItemInventoryRecord.class;
    }

    /**
     * The column <code>item_inventory.id</code>.
     */
    public final TableField<ItemInventoryRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>item_inventory.name</code>.
     */
    public final TableField<ItemInventoryRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(256).nullable(false), this, "");

    /**
     * The column <code>item_inventory.inventory</code>.
     */
    public final TableField<ItemInventoryRecord, String> INVENTORY = createField(DSL.name("inventory"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>item_inventory.active</code>.
     */
    public final TableField<ItemInventoryRecord, Byte> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>item_inventory.description</code>.
     */
    public final TableField<ItemInventoryRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * Create a <code>item_inventory</code> table reference
     */
    public ItemInventory() {
        this(DSL.name("item_inventory"), null);
    }

    /**
     * Create an aliased <code>item_inventory</code> table reference
     */
    public ItemInventory(String alias) {
        this(DSL.name(alias), ITEM_INVENTORY);
    }

    /**
     * Create an aliased <code>item_inventory</code> table reference
     */
    public ItemInventory(Name alias) {
        this(alias, ITEM_INVENTORY);
    }

    private ItemInventory(Name alias, Table<ItemInventoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ItemInventory(Name alias, Table<ItemInventoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ItemInventory(Table<O> child, ForeignKey<O, ItemInventoryRecord> key) {
        super(child, key, ITEM_INVENTORY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ItemInventoryRecord> getPrimaryKey() {
        return Keys.KEY_ITEM_INVENTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ItemInventoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemInventoryRecord>>asList(Keys.KEY_ITEM_INVENTORY_PRIMARY);
    }

    @Override
    public ItemInventory as(String alias) {
        return new ItemInventory(DSL.name(alias), this);
    }

    @Override
    public ItemInventory as(Name alias) {
        return new ItemInventory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemInventory rename(String name) {
        return new ItemInventory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ItemInventory rename(Name name) {
        return new ItemInventory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Byte, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
